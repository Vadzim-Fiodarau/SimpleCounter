{"version":3,"sources":["Counter.tsx","SetCounterValue.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","counter","enterNewValue","incorrect","maxValue","startValue","className","disabled","undefined","onClick","counterIncrement","resetCounter","SetCounterValue","OnChangeMaxValueHandler","OnChangeStartValueHandler","setNewValueHandler","incorrectInput","type","value","onChange","App","useState","setCounter","setMaxValue","setStartValue","useEffect","currentMaxValueStorage","localStorage","getItem","currentStartValueStorage","newMaxValueStorage","JSON","parse","newStartValueStorage","setItem","stringify","e","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eea2196b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\n\r\n\r\ntype CounterPropsType = {\r\n    counterIncrement: () => void\r\n    resetCounter: () => void\r\n    counter: number | string\r\n    maxValue:number\r\n    startValue: number\r\n}\r\n\r\n\r\nfunction Counter(props: CounterPropsType) {\r\n\r\n    const classes = props.counter >= 0 ? true : undefined\r\n    const enterNewValue = props.counter\r\n    const incorrect = props.maxValue < 0 || props.startValue < 0 || props.maxValue <= props.startValue ?  <div className={'error'}>Incorrect value </div>: enterNewValue\r\n\r\n    return (\r\n        <div className={'wrapper-counter'}>\r\n            <div className={'counter'}>\r\n                <div className={props.counter === props.maxValue ? 'red' : ''}><h1>{incorrect}</h1></div>\r\n            </div>\r\n            <div className={'wrapper-inc-res'}>\r\n                <div className={'wrap-button-inc'}>\r\n                    <button className={'button-inc'}\r\n                            disabled={props.counter === props.maxValue\r\n                            || props.maxValue <0  || props.startValue <0\r\n                            || props.startValue === props.maxValue\r\n                            || props.startValue === props.maxValue ? true : undefined}\r\n                            onClick={props.counterIncrement}>inc\r\n                    </button>\r\n                </div>\r\n                <div className={'wrap-button-res'}>\r\n                    <button className={classes ? 'button-res' : 'button-res'}\r\n                            disabled={props.counter === 0  ? true : undefined}\r\n                            onClick={props.resetCounter}>reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React, {ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    OnChangeMaxValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    OnChangeStartValueHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    setNewValueHandler: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    counter:number | string\r\n}\r\n\r\nexport const SetCounterValue: React.FC<PropsType> = ({\r\n                                                         OnChangeMaxValueHandler,\r\n                                                         OnChangeStartValueHandler,\r\n                                                         setNewValueHandler,\r\n                                                         maxValue,\r\n                                                         startValue,\r\n                                                         counter\r\n                                                     }) => {\r\n\r\nconst incorrectInput = maxValue <= startValue ? 'inputError' : ''\r\n\r\n    return (\r\n        <div className={'set-wrapper-counter'}>\r\n            <div className={'set-counter'}>\r\n                <div className={'set-input'}>\r\n                        <h3>max value:\r\n                            <input className={maxValue < 0 || incorrectInput ? 'inputError' : 'border'}\r\n                                   type={'number'}\r\n                                   value={maxValue}\r\n                                   onChange={OnChangeMaxValueHandler}/>\r\n                        </h3>\r\n\r\n\r\n                        <h3>start value:\r\n                            <input className={startValue < 0 || incorrectInput ? 'inputError' : 'border'}\r\n                                   type={'number'}\r\n                                   value={startValue}\r\n                                   onChange={OnChangeStartValueHandler}\r\n                            />\r\n                        </h3>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div className={'set-wrapper'}>\r\n                <div className={'wrap-button-set'}>\r\n                    <button className={'button-set'}\r\n                            disabled={ maxValue < 0 || startValue < 0 ||\r\n                            startValue >= counter || maxValue <= counter ||\r\n                            maxValue <= startValue || counter > startValue\r\n                                ? true: undefined}\r\n                            onClick={setNewValueHandler}>\r\n                        set\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Counter from \"./Counter\";\r\nimport {SetCounterValue} from \"./SetCounterValue\";\r\n\r\n\r\nfunction App() {\r\n\r\n    let [counter, setCounter] = useState<any>(0)\r\n    let [maxValue, setMaxValue] = useState(0)\r\n    let [startValue, setStartValue] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        const currentMaxValueStorage = localStorage.getItem('currentMaxValue')\r\n        const currentStartValueStorage = localStorage.getItem('currentStartValue')\r\n        if (currentMaxValueStorage) {\r\n            const newMaxValueStorage = JSON.parse(currentMaxValueStorage)\r\n            setMaxValue(newMaxValueStorage)\r\n        }\r\n        if (currentStartValueStorage) {\r\n            const newStartValueStorage = JSON.parse(currentStartValueStorage)\r\n            setStartValue(newStartValueStorage)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('currentMaxValue', JSON.stringify(maxValue))\r\n        localStorage.setItem('currentStartValue', JSON.stringify(startValue))\r\n    }, [maxValue, startValue])\r\n\r\n\r\n    const counterIncrement = () => {\r\n        if (counter < maxValue) {\r\n            return setCounter(++counter)\r\n        }\r\n    }\r\n\r\n    const resetCounter = () => setCounter(startValue)\r\n\r\n    const OnChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.value >= JSON.stringify(0)){\r\n            setCounter(\"enter values and press 'set'\")\r\n        }\r\n        setMaxValue(JSON.parse(e.currentTarget.value))\r\n\r\n    }\r\n    const OnChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.value >= JSON.stringify(0)){\r\n            setCounter(\"enter values and press 'set'\")\r\n        }\r\n            setStartValue(JSON.parse(e.currentTarget.value))\r\n    }\r\n\r\n    const setNewValueHandler = () => {\r\n        setCounter(maxValue)\r\n        setCounter(startValue)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <SetCounterValue OnChangeMaxValueHandler={OnChangeMaxValueHandler}\r\n                             OnChangeStartValueHandler={OnChangeStartValueHandler}\r\n                             setNewValueHandler={setNewValueHandler}\r\n                             maxValue={maxValue}\r\n                             startValue={startValue}\r\n                             counter={counter}\r\n            />\r\n            <Counter counterIncrement={counterIncrement}\r\n                     resetCounter={resetCounter}\r\n                     counter={counter}\r\n                     maxValue={maxValue}\r\n                     startValue={startValue}\r\n\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}